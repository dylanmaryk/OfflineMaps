The first step to representing OpenStreetMap data in a visual format is to actually acquire that data. The OpenStreetMap API provides an endpoint for retrieving this map data by defining a bounding box as input, consisting of the longitude of the left, latitude of the bottom, longitude of the right and latitude of the top. This returns raw map data for the specified region in the form of a .osm file. (http://wiki.openstreetmap.org/wiki/API_v0.6#Retrieving_map_data_by_bounding_box:_GET_.2Fapi.2F0.6.2Fmap). For example, we can retrieve data for Greater London using the bounding box (http://wiki.openstreetmap.org/wiki/Bounding_Box) “-0.221272,51.4801,-0.071754,51.533309”:

http://api06.dev.openstreetmap.org/api/0.6/map?bbox=-0.221272,51.4801,-0.071754,51.533309

The raw data can be retrieved from this URL using JavaScript in the browser, meaning it can then be stored locally on the user’s device, so that the same data does not need to be requested every time the page is loaded. However, because this data may be uploaded frequently, and I believe it best to rely on other organisation’s servers as little as possible, due to possible downtime for example, I have decided to write a bash script that can be made to run periodically. This bash script can frequently download files required by the project, such as not only .osm files but also jQuery JavaScript files. The user’s browser can then download and cache these files directly from my own server.

In terms of rendering raw OpenStreetMap data, I want to find a method for parsing and displaying it as manually as possible i.e. finding a balance between producing my own code and making use of existing libraries. A starting point is to convert the OpenStreetMap data from an XML format into a GeoJSON format. This will become useful as many JavaScript mapping libraries work with GeoJSON formatted data. I have chosen to do this using the osmtogeojson open-source library (https://github.com/tyrasd/osmtogeojson).

I have opted to experiment with using the open-source JavaScript library Leaflet (http://leafletjs.com/), as it is designed with being mobile-friendly in mind, is lightweight (beneficial in terms of being quick to cache and taking up minimal storage space on the user’s device) and because it is open-source can be more easily modified. There are therefore also many other open-source projects that build upon Leaflet already in existence.

The above accounts for the basics of how to get and display useful information for the user without an Internet connection, the .osm, .js etc. files required being cached when the user first visits the website while they are online. However, it is also vital to retrieve and cache map tiles from OpenStreetMap, these tiles representing the map itself underneath the additional information. This project therefore combines image tiles and vectors: images tiles for the essential map itself and vectors for the additional details that, later on in development, will allow the user to view and search for specific information.